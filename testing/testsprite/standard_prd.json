{
  "meta": {
    "project": "MUFG Pension Insights Backend API",
    "date": "2025-08-17",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "MUFG Pension Insights Backend API is a production-ready ExpressJS backend designed to provide comprehensive pension data management, AI-powered chatbot interactions, financial KPI calculations, advanced analytics, audit logging, and secure role-based access control integrated seamlessly with NextAuth for authentication.",
  "core_goals": [
    "Enable secure and efficient management of pension member data with full CRUD support.",
    "Provide AI-enhanced pension guidance through a local Large Language Model (LLM) integrated chatbot with fallback mechanisms.",
    "Offer accurate and configurable KPI calculations for retirement planning and financial projections.",
    "Support advanced analytics and reporting tailored to different user roles in pension management.",
    "Implement a comprehensive audit logging system ensuring compliance and traceability of user actions.",
    "Ensure robust security with JWT authentication, role-based access control (Member, Advisor, Regulator), rate limiting, and data validation.",
    "Facilitate seamless frontend integration through extensive Swagger/OpenAPI 3.0 documentation and interactive API testing capabilities."
  ],
  "key_features": [
    "JWT-based authentication integrated with NextAuth for token verification and session management.",
    "Comprehensive PensionData model covering 54+ fields with dual-database integration (PostgreSQL primary, SQLite fallback).",
    "Full RESTful CRUD operations for managing pension records with advanced filtering, search, pagination, and bulk operations.",
    "Member Management with role-specific access and personalized pension data operations.",
    "AI-powered Chatbot Service utilizing local LLM integration providing natural language pension advice, context-awareness, and intelligent fallback to structured responses.",
    "Robust KPICalculations service offering retirement age, corpus projections, and readiness scores.",
    "Analytics and Reporting dashboards delivering role-based insights, export, and report generation.",
    "File-based Audit Logging system capturing authentication, data access, chatbot interactions, and system events with log file management and export.",
    "Extensive Role-Based Access Control (RBAC) with defined permissions for Member, Advisor, and Regulator, enforcing data security and privacy.",
    "Complete OpenAPI 3.0 Swagger documentation with interactive UI for API exploration and testing."
  ],
  "user_flow_summary": [
    "User logs in via frontend NextAuth and obtains a JWT token for API access.",
    "User sends API requests to backend with Bearer token header for authentication.",
    "Backend verifies token, authorizes based on user role (Member/Advisor/Regulator), and enforces permissions.",
    "Member accesses own pension data, analytics, and AI chatbot for personalized guidance.",
    "Advisor manages assigned clients, views analytics, makes portfolio optimizations, and uses advanced advisor services.",
    "Regulator accesses full system data, audit logs, analytics dashboards, and compliance reporting features.",
    "Users interact with the AI Chatbot sending pension-related questions; chatbot uses local LLM or fallback responses to answer.",
    "Users can retrieve financial KPIs such as retirement age projection and corpus calculations via API.",
    "Administrators and regulators retrieve, filter, and export audit logs securely via the API.",
    "All interactions, data modifications, and accesses are logged for compliance and audit trail maintenance."
  ],
  "validation_criteria": [
    "Successful JWT authentication and authorization with role-based permission enforcement for all endpoints.",
    "Full CRUD functionality on PensionData with 100% field coverage and data persistence on PostgreSQL and SQLite.",
    "Local LLM integration with chatbot provides contextual, AI-enhanced responses and falls back gracefully when unavailable.",
    "Complete and accurate KPI financial calculations as specified, producing consistent projections and readiness scores.",
    "Analytics dashboard endpoints return role-appropriate aggregated data and support report export and pagination.",
    "Audit logging system records all critical events with log files created daily and supports secure regulator-only access and exports.",
    "Rate limiting applied per endpoint category to prevent abuse and maintain backend stability.",
    "Swagger API documentation accessible at /api-docs with interactive testing and accurate schema definitions for all endpoints.",
    "Secure handling of sensitive data with sanitization in logs and proper data access controls.",
    "Performance benchmarks met with sub-200ms response times for dashboard services and bulk operations.",
    "Comprehensive error handling with consistent API responses and detailed validation error messages."
  ],
  "code_summary": {
    "tech_stack": [
      "Node.js",
      "Express.js",
      "JavaScript (ES6+)",
      "PostgreSQL",
      "SQLite",
      "JWT",
      "Swagger/OpenAPI",
      "CORS",
      "Helmet",
      "Morgan",
      "Compression",
      "dotenv"
    ],
    "features": [
      {
        "name": "Authentication System",
        "description": "JWT-based authentication with NextAuth integration for token verification and user session management",
        "files": [
          "src/routes/auth.js",
          "src/middleware/auth.js",
          "src/config/nextauth.js",
          "generate-test-token.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/auth/verify": {
              "post": {
                "summary": "Verify JWT token",
                "description": "Validates the JWT token provided by NextAuth and returns user information",
                "tags": [
                  "Authentication"
                ],
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Token is valid",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "user": {
                              "$ref": "#/components/schemas/User"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/auth/me": {
              "get": {
                "summary": "Get current user",
                "description": "Retrieve current authenticated user information",
                "tags": [
                  "Authentication"
                ],
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "200": {
                    "description": "User information retrieved successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Pension Data Management",
        "description": "Comprehensive CRUD operations for pension data with 54 fields including personal, financial, investment, and security information",
        "files": [
          "src/routes/pensionData.js",
          "src/models/PensionData.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/pension-data": {
              "get": {
                "summary": "Get all pension data with filtering and pagination",
                "description": "Retrieve pension data with comprehensive filtering, search, and pagination options",
                "tags": [
                  "Pension Data"
                ],
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "parameters": [
                  {
                    "name": "page",
                    "in": "query",
                    "schema": {
                      "type": "integer",
                      "default": 1
                    }
                  },
                  {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                      "type": "integer",
                      "default": 10
                    }
                  },
                  {
                    "name": "country",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "pensionType",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "minAge",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    }
                  },
                  {
                    "name": "maxAge",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    }
                  },
                  {
                    "name": "search",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "post": {
                "summary": "Create new pension data record",
                "description": "Create a new pension data record with comprehensive validation",
                "tags": [
                  "Pension Data"
                ],
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/pension-data/{id}": {
              "get": {
                "summary": "Get pension data by ID",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ]
              },
              "put": {
                "summary": "Update pension data",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ]
              },
              "delete": {
                "summary": "Delete pension data",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ]
              }
            },
            "/api/pension-data/stats/overview": {
              "get": {
                "summary": "Get pension data statistics",
                "description": "Retrieve comprehensive statistics about the pension data"
              }
            },
            "/api/pension-data/bulk": {
              "post": {
                "summary": "Bulk create pension data records"
              },
              "delete": {
                "summary": "Bulk delete pension data records"
              }
            }
          }
        }
      },
      {
        "name": "Member Management",
        "description": "Member-specific data management with role-based access control for personal pension information",
        "files": [
          "src/routes/members.js",
          "src/controllers/MemberDataController.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/members/{memberId}": {
              "get": {
                "summary": "Get member data by ID",
                "description": "Retrieve comprehensive pension data for a specific member",
                "parameters": [
                  {
                    "name": "memberId",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "put": {
                "summary": "Update member data",
                "parameters": [
                  {
                    "name": "memberId",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/api/members/{memberId}/contributions": {
              "get": {
                "summary": "Get member contribution history"
              }
            },
            "/api/members/{memberId}/projections": {
              "get": {
                "summary": "Get member retirement projections"
              }
            },
            "/api/members/{memberId}/dashboard": {
              "get": {
                "summary": "Get member dashboard data"
              }
            }
          }
        }
      },
      {
        "name": "User Management",
        "description": "User account management and profile operations with role-based permissions",
        "files": [
          "src/routes/users.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/users": {
              "get": {
                "summary": "Get users list",
                "description": "Retrieve users based on role permissions"
              }
            },
            "/api/users/{userId}": {
              "get": {
                "summary": "Get user by ID",
                "parameters": [
                  {
                    "name": "userId",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "put": {
                "summary": "Update user",
                "parameters": [
                  {
                    "name": "userId",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "AI Chatbot Service",
        "description": "AI-powered chatbot for pension guidance and insights with local LLM integration and intelligent fallback",
        "files": [
          "src/routes/chatbot.js",
          "src/controllers/ChatbotController.js",
          "src/services/ChatbotService.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/chatbot/message": {
              "post": {
                "summary": "Send message to chatbot",
                "description": "Process user message and get AI-powered response for pension guidance"
              }
            },
            "/api/chatbot/history": {
              "get": {
                "summary": "Get conversation history"
              }
            },
            "/api/chatbot/capabilities": {
              "get": {
                "summary": "Get chatbot capabilities"
              }
            }
          }
        }
      },
      {
        "name": "KPI Calculations",
        "description": "Financial calculations and retirement planning analytics including retirement age, corpus calculations, and projections",
        "files": [
          "src/routes/kpi.js",
          "src/services/KpiService.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/kpi/retirement-age": {
              "post": {
                "summary": "Calculate projected retirement age",
                "description": "Calculates when a member can retire based on target corpus and contributions"
              }
            },
            "/api/kpi/retirement-corpus": {
              "post": {
                "summary": "Calculate retirement corpus projections"
              }
            }
          }
        }
      },
      {
        "name": "Analytics & Reporting",
        "description": "Business intelligence and analytics dashboards with role-based data access",
        "files": [
          "src/routes/analytics.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/analytics/dashboard": {
              "get": {
                "summary": "Get analytics dashboard data",
                "description": "Retrieve role-based analytics"
              }
            },
            "/api/analytics/reports": {
              "get": {
                "summary": "Generate reports"
              }
            },
            "/api/analytics/export": {
              "post": {
                "summary": "Export analytics data"
              }
            }
          }
        }
      },
      {
        "name": "Audit Logging System",
        "description": "Comprehensive audit log management and compliance reporting for regulatory oversight",
        "files": [
          "src/routes/logs.js",
          "src/services/AuditService.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/logs/files": {
              "get": {
                "summary": "Get available log files",
                "description": "Retrieve list of available audit log files"
              }
            },
            "/api/logs/{type}/{date}": {
              "get": {
                "summary": "Get logs by type and date",
                "parameters": [
                  {
                    "name": "type",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "date",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                ]
              }
            },
            "/api/logs/export": {
              "post": {
                "summary": "Export audit logs",
                "description": "Export audit logs for compliance reporting"
              }
            }
          }
        }
      },
      {
        "name": "Database Integration",
        "description": "Dual database support with PostgreSQL primary and SQLite fallback, connection pooling, and transaction management",
        "files": [
          "src/config/database.js",
          "scripts/importData.js",
          "src/utils/excelReader.js",
          "database/migrations/004_complete_pension_table_sqlite.sql"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Database Integration",
            "description": "Dual database system with automatic PostgreSQL to SQLite fallback"
          }
        }
      },
      {
        "name": "Role-Based Access Control",
        "description": "Comprehensive RBAC system with three roles (Member, Advisor, Regulator) and granular permissions",
        "files": [
          "src/config/roles.js",
          "src/middleware/auth.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "RBAC System",
            "description": "Role-based access control with Member, Advisor, and Regulator roles"
          }
        }
      },
      {
        "name": "API Documentation",
        "description": "Complete OpenAPI 3.0 documentation with Swagger UI interface for interactive API testing",
        "files": [
          "src/config/swagger.js",
          "app.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api-docs": {
              "get": {
                "summary": "Swagger UI interface"
              }
            },
            "/api-docs.json": {
              "get": {
                "summary": "OpenAPI JSON specification"
              }
            },
            "/api": {
              "get": {
                "summary": "API endpoints listing"
              }
            }
          }
        }
      }
    ]
  }
}
